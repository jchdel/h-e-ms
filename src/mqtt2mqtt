#!/usr/bin/env python3

import paho.mqtt.publish as publish
import paho.mqtt.client as mqtt
mqtt_broker = 'localhost'
mqtt_port   = 1883
mqtt_auth   = { 'username': 'emonpi', 'password':'emonpimqtt2016' }
mqtt_prefix = "sensors/#"

import redis
redis_host = 'localhost'
redis_port = 6379

import csv
def merge(*dict_args):
    result = {}
    for dictionary in dict_args:
        result.update(dictionary)
    return result

from datetime import date
from datetime import timedelta
from datetime import datetime

import syslog
DEBUG = 7
INFO = 6
NOTICE = 5
WARNING = 4
ERROR = 3
CRITICAL = 2
ALERT = 1
EMERGENCY = 0

processes = {}
taskList = {}
#task = {'function':<function_name>, 'params': <dict_args>}
heaterList = []

#######################################################################

def noop(timestamp, value, dict_args):
    return value
processes['noop'] = noop

def debug(timestamp, value, dict_args):
    print('ARGS:',dict_args)
    print('VALUE:',value)
    return value
processes['debug'] = debug

def scale(timestamp, value, dict_args):
    if value is None: return value
    factor = float(dict_args['param'])
    return float(value) * factor
processes['scale'] = scale

def divide(timestamp, value, dict_args):
    if value is None: return value
    value = float(value)
    factor = float(dict_args['param'])
    if factor == 0: return None
    return float(value / factor)
processes['divide'] = divide

def offset(timestamp, value, dict_args):
    if value is None: return value
    value = float(value)
    term = float(dict_args['param'])
    return value + term
processes['offset'] = offset

def allowpositive(timestamp, value, dict_args):
    if float(value) < 0: value = 0.0
    return value
processes['allowpositive'] = allowpositive

def allownegative(timestamp, value, dict_args):
    if float(value) > 0: value = 0.0
    return value
processes['allownegative'] = allownegative

def max_value_allowed(timestamp, value, dict_args):
    factor = float(dict_args['param'])
    if float(value) > factor: value = factor
    return value
processes['max_value_allowed'] = max_value_allowed

def min_value_allowed(timestamp, value, dict_args):
    factor = float(dict_args['param'])
    if float(value) < factor: value = factor
    return value
processes['min_value_allowed'] = min_value_allowed

def reset2zero(timestamp, value, dict_args):
    value = 0
    return value
processes['reset2zero'] = reset2zero

def reduce2bootstrap(timestamp, value, dict_args):
    try: 
        bootstrap_value = get_value_from_redis('{}/bootsrap'.format(dict_args['topic']))
    except:
        bootstrap_value = value
        publish_to_cache(timestamp, value, {'topic': '{}/bootsrap'.format(dict_args['topic'])})
    return float(value) - float(bootstrap_value)
processes['reduce2bootstrap'] = reduce2bootstrap

def reset2original(timestamp, value, dict_args):
    value = get_value_from_redis('{}/original'.format(dict_args['topic']))
    return value
processes['reset2original'] = reset2original

def reset2null(timestamp, value, dict_args):
    return None
processes['reset2null'] = reset2null

def signed2unsigned(timestamp, value, dict_args):
    if int(value) < 0: value = int(value) + 65536
    return value
processes['signed2unsigned'] = signed2unsigned

def abs_value(timestamp, value, dict_args):
    return abs(float(value))
processes['abs_value'] = abs_value

def times_sensor(timestamp, value, dict_args):
    sensor_id = dict_args['param']
    try: sensor = get_value_from_redis(sensor_id)
    except: 
        syslog.syslog (ERROR, 'Unable to fetch {} value from Redis! Aborting!'.format(sensor_id))
        return value
    return float(value) * float(sensor)
processes['times_sensor'] = times_sensor

def divide_sensor(timestamp, value, dict_args):
    sensor_id = dict_args['param']
    try: sensor = get_value_from_redis(sensor_id)
    except: 
        syslog.syslog (ERROR, 'Unable to fetch {} value from Redis! Aborting!'.format(sensor_id))
        return value
    if float(sensor) == 0: return None
    return float(value) / float(sensor)
processes['divide_sensor'] = divide_sensor

def add_sensor(timestamp, value, dict_args):
    sensor_id = dict_args['param']
    try: sensor = get_value_from_redis(sensor_id)
    except: 
        syslog.syslog (ERROR, 'Unable to fetch {} value from Redis! Aborting!'.format(sensor_id))
        return value
    return float(value) + float(sensor)
processes['add_sensor'] = add_sensor

def substract_sensor(timestamp, value, dict_args):
    sensor_id = dict_args['param']
    try: sensor = get_value_from_redis(sensor_id)
    except: 
        syslog.syslog (ERROR, 'Unable to fetch {} value from Redis! Aborting!'.format(sensor_id))
        raise
    response = float(value) - float(sensor)
    return response
processes['substract_sensor'] = substract_sensor

def max_sensor(timestamp, value, dict_args):
    sensor_id = dict_args['param']
    try: sensor = get_value_from_redis(sensor_id)
    except: 
        syslog.syslog (ERROR, 'Unable to fetch {} value from Redis! Aborting!'.format(sensor_id))
        return value
    if float(value) < float(sensor): return value
    else: return sensor
processes['max_sensor'] = max_sensor

def min_sensor(timestamp, value, dict_args):
    sensor_id = dict_args['param']
    try: sensor = get_value_from_redis(sensor_id)
    except: 
        syslog.syslog (ERROR, 'Unable to fetch {} value from Redis! Aborting!'.format(sensor_id))
        return value
    if float(value) > float(sensor): return value
    else: return sensor
processes['min_sensor'] = min_sensor

def report_power(timestamp, value, dict_args):
    try: topic = dict_args['topic']
    except: 
        syslog.syslog (ERROR, 'No power channel provided. Aborting!')
    return value

def power_to_energy(timestamp, value, dict_args):
    try: topic = dict_args['topic']
    except: 
        syslog.syslog (ERROR, 'No power channel provided. Aborting!')
        return value
    try: energy_name = dict_args['energy_name']
    except: 
        syslog.syslog (ERROR, 'No energy channel provided. Aborting!')
        return value
    try: previous_timestamp, previous_value = get_previous_from_redis(topic)
    except: 
        syslog.syslog (WARNING, 'No previous power value found for {}'.format(topic))
        previous_timestamp = timestamp
        previous_value = 0.0
    try: previous_t_energy, previous_v_energy = get_from_redis(energy_name)
    except: 
        syslog.syslog (WARNING, 'No previous energy value found for {}'.format(energy_name))
        previous_v_energy = 0.0
        previous_t_energy = timestamp
    # a bit of computation
    # beware about the data types
    timestamp    = int(timestamp)
    previous_timestamp = int(previous_timestamp)
    delta_time   = float(int(timestamp) - int(previous_timestamp))
    delta_value  = float(value) - float(previous_value)
    delta_energy = delta_time * float(previous_value) + ( delta_value * delta_time * 0.5 )
    # power is in Watt, and time in second. We want kWh for energy.
    delta_energy = delta_energy / 3600 / 1000
    energy       = float(previous_v_energy) + delta_energy
    #syslog.syslog(DEBUG, '{}: {} kWh'.format(energy_name, energy))
    return energy
processes['power_to_energy'] = power_to_energy

def energy_to_energy_monthly(timestamp, value, dict_args):
    try: energy_name = dict_args['energy_name']
    except: 
        syslog.syslog (ERROR, 'No energy channel provided. Aborting!')
        return value
    abs_energy_name_daily   = 'abs_{}_daily'.format(energy_name)
    energy_name_daily       = '{}_daily'.format(energy_name)
    abs_energy_name_weekly  = 'abs_{}_weekly'.format(energy_name)
    energy_name_weekly      = '{}_weekly'.format(energy_name)
    abs_energy_name_monthly = 'abs_{}_monthly'.format(energy_name)
    energy_name_monthly     = '{}_monthly'.format(energy_name)
    today                   = date.today()
    yesterday               = today - timedelta(days = 1)
    previous_timestamp, previous_value = get_previous_from_redis(energy_name)
    previous_date           = date.fromtimestamp(int(previous_timestamp))
    if previous_date == yesterday:
        try: t_daily, v_daily = get_from_redis(abs_energy_name_daily)
        except:
            t_daily = previous_timestamp
            v_daily = 0.0
        publish_to_cache(previous_timestamp, previous_value, {'topic': abs_energy_name_daily})
        # we just computed yesterday's value! let's adapt the publish date accordingly...
        #publish_date = yesterday - timedelta(days = 1)
        #publish_timestamp = int(datetime(year=publish_date.year,month=publish_date.month,day=publish_date.day,).timestamp())
        #publish_to_timeserie(publish_timestamp, float(previous_value) - float(v_daily), {'topic': energy_name_daily})
        publish_to_timeserie(previous_timestamp, float(previous_value) - float(v_daily), {'topic': energy_name_daily})
    if previous_date == yesterday and today.isoweekday() == 1:
        try: t_weekly, v_weekly = get_from_redis(abs_energy_name_weekly)
        except:
            t_weekly = previous_timestamp
            v_weekly = 0.0
        publish_to_cache(previous_timestamp, previous_value, {'topic': abs_energy_name_weekly})
        publish_to_timeserie(previous_timestamp, float(previous_value) - float(v_weekly), {'topic': energy_name_weekly})
    if previous_date == yesterday and today.day == 1:
        try: t_monthly, v_monthly = get_from_redis(abs_energy_name_monthly)
        except:
            t_monthly = previous_timestamp
            v_monthly = 0.0
        publish_to_cache(previous_timestamp, previous_value, {'topic': abs_energy_name_monthly})
        publish_to_timeserie(previous_timestamp, float(previous_value) - float(v_monthly), {'topic': energy_name_monthly})
    return value
processes['energy_to_energy_monthly'] = energy_to_energy_monthly

def energy_to_energy_today(timestamp, value, dict_args):
    try: energy_name = dict_args['energy_name']
    except: 
        syslog.syslog (ERROR, 'No energy channel provided. Aborting!')
        return value
    today        = date.today()
    yesterday    = today - timedelta(days = 1)
    energy_name_today_initial = '{}_today_initial'.format(energy_name)
    try: 
        initial_timestamp, initial_energy = get_from_redis(energy_name_today_initial)
    except: 
        initial_energy = 0.0
        initial_timestamp = timestamp
        publish_to_cache(timestamp, initial_energy, {'topic': energy_name_today_initial})
    initial_date = date.fromtimestamp(int(initial_timestamp))
    if initial_date == yesterday:
        initial_energy = value
        publish_to_cache(timestamp, initial_energy, {'topic': energy_name_today_initial})
    daily_energy = float(value) - float(initial_energy)
    return daily_energy
processes['energy_to_energy_today'] = energy_to_energy_today

def accumulator(timestamp, value, dict_args):
    return value
#processes['accumulator'] = accumulator

def pulse_diff(timestamp, value, dict_args):
    return value
#processes['pulse_diff'] = pulse_diff

def energy_to_power(timestamp, value, dict_args):
    return value
#processes['energy_to_power'] = energy_to_power

def allocate_extra_power(timestamp, value, dict_args):
    power = float(value)
    if power > 0: # battery is discharging
        # no extra power to allocate. Do we need to stop some load?
        soc = int(get_value_from_redis('battery/state_of_charge'))
        if soc < 50:
            # stop free load(s)
            None
        else:
            None
    return value
#processes['allocate_extra_power'] = allocate_extra_power

def display_soc(timestamp, value, dict_args):
    soc = float(value)
    device = dict_args['topic']
    color = 'red'
    if soc > 50.0: 
        color = 'orange'
    if soc > 60.0: 
        color = 'yellow'
    if soc > 70.0: 
        color = 'green'
    if soc > 80.0: 
        color = 'blue'
    if soc > 90.0: 
        color = 'indigo'
    set_color(color, device)
    return value
processes['display_soc'] = display_soc

def need_utility(timestamp, value, dict_args):
    soc = float(value)
    utility = dict_args['topic']
    if soc < 50.0: 
        if turn_on(utility):
            blink('lampe-temoin')
    #if soc > 98.0: 
    #    if turn_off(utility):
    #        blink('lampe-temoin')
    return value
processes['need_utility'] = need_utility

def thermostat(timestamp, value, dict_args):
    heater      = dict_args['topic']
    comfort     = float(dict_args['comfort'])
    ir_power    = float(dict_args['ir_power'])
    # some values from cache and environment
    soc         = float(get_value_from_redis("battery/state_of_charge"))
    utility     = float(get_value_from_redis("utility/power"))
    temperature = float(get_value_from_redis("{}-thermo/temperature".format(heater)))
    # get a timestamp for the current minute
    now_timestamp = int(datetime.now().timestamp())
    now_timestamp = datetime.fromtimestamp(now_timestamp)
    now_timestamp = datetime(year=now_timestamp.year,month=now_timestamp.month,day=now_timestamp.day,hour=now_timestamp.hour,minute=now_timestamp.minute)
    now_timestamp = int(now_timestamp.timestamp())
    # Do we exceed threshold?
    if soc < 50.0:
        if turn_off(heater):
            blink('lampe-temoin')
            syslog.syslog(ALERT, 'Battery level too low ({}%)'.format(soc))
        return value
    # Do we exceed threshold?
    if utility > 3300.0:
        if turn_off(heater):
            blink('lampe-temoin')
            syslog.syslog(ALERT, 'Current pumped too high ({} W)'.format(utility))
        return value
    # If we just processes this heater, let's wait a bit for energy data to recover
    try:
        last_timestamp, last_temp = get_from_redis("last_thermostat/{}".format(heater))
        last_timestamp = int(last_timestamp)
        if last_timestamp >= now_timestamp: 
            #syslog.syslog(DEBUG, '{}: Already proccessed this heater ({}°C) this minute! Skipping...'.format(heater, last_temp))
            return value
    except:
        pass
    # tag last process of a heater
    da = {}
    da['topic'] = "last_thermostat/{}".format(heater)
    publish_to_cache(now_timestamp, temperature, da)
    # Let's do the real job
    # First let's check priority
    try:
        forced  = in_between(dict_args['forced'])
        #syslog.syslog(DEBUG, '{} is {} in forced period {}'.format(heater, forced, dict_args['forced']))
    except:  
        forced  = False
        #syslog.syslog(DEBUG, 'No forced period defined for {}'.format(heater))
    if utility > 40.0 and forced: 
        if temperature > comfort: 
            if turn_off(heater):
                syslog.syslog(INFO, '{} is warm enough ({}°C)'.format(heater, temperature))
        else:
            if is_off(heater) and (utility + ir_power < 3300.0): # avoid overloading utility
                if turn_on(heater):
                    syslog.syslog(INFO, 'Force {} ({}°C) towards {}°C'.format(heater, temperature, comfort))
        return value
    # Not forced!
    try:
        normal = in_between(dict_args['normal'])
        #syslog.syslog(DEBUG, '{} is {} in normal period {}'.format(heater, normal, dict_args['normal']))
    except:  
        normal = False
        #syslog.syslog(DEBUG, 'No normal period defined for {}'.format(heater))
    if not normal: 
        comfort = 18.0
        #syslog.syslog(DEBUG, 'Reducing comfort to {}°C for {}'.format(comfort, heater))
    # do we need to heat the room?
    if temperature > comfort:
        if turn_off(heater):
            syslog.syslog(INFO, '{} is warm enough ({}°C)'.format(heater, temperature))
        return value
    # what about available power?
    available_power = available_heating_power()
    # do not count heater twice
    try: 
        if str(get_value_from_redis("{}/state".format(heater))) == "ON":
            power = float(get_value_from_redis('{}/power'.format(heater)))
            if power == 0:
                power = ir_power
                #syslog.syslog(DEBUG, '{} is used but does not report power usage. Using config value ({}) instead...'.format(heater, power))
            available_power += power
    except: 
        syslog.syslog(DEBUG, 'I guess {} has no associated heater!?'.format(heater))
        return value
    #syslog.syslog(DEBUG, '{}:: available: {}W; needed:{}W; T: {}°C; consigne: {}°C'.format(heater, available_power, ir_power, temperature, comfort))
    # do we have enough power to turn on this heater?
    if ir_power < available_power: 
        if turn_on(heater):
            syslog.syslog(INFO, 'Activate {} ({}°C) towards {}°C'.format(heater, temperature, comfort))
    else: 
        if turn_off(heater):
            syslog.syslog(INFO, 'Not enough available power for {} ({} W)'.format(heater, available_power))
    return value
processes['thermostat'] = thermostat

def click(timestamp, value, dict_args):
    #topic = '{}'.format(dict_args['topic'])
    #syslog.syslog(DEBUG, 'button: {}'.format(dict_args))
    # value may be either "single" or "double"
    if   value == 'single': 
        pass 
    elif value == 'double': 
        pass
    else: 
        pass
        syslog.syslog(CRITICAL, 'Button value: {}'.format(value))
    return value
processes['click'] = click

def click_thermostat(timestamp, value, dict_args):
    topic = '{}-thermo/temperature'.format(dict_args['topic'])
    single = float(dict_args['single'])
    double = float(dict_args['double'])
    if value == 'single': 
        comfort = single
    elif value == 'double': 
        comfort = double
    else: 
        syslog.syslog(CRITICAL, 'Button value: {}'.format(value))
        return value
    for task in taskList[topic]:
        if task['name'] != 'thermostat': 
            continue 
        params = task['params']
        params['comfort'] = comfort
        #syslog.syslog(DEBUG, 'Set comfort to {}°C for {}'.format(comfort, dict_args['topic']))
    return value
processes['click_thermostat'] = click_thermostat

def restore_utility(timestamp, value, dict_args):
    topic = '{}'.format(dict_args['topic'])
    previous = get_previous_value_from_redis(topic)
    if value == previous: return value # NOOP
    if value == 'OFF':
        syslog.syslog(WARNING, 'Turning off heaters and restoring EDF...')
        for h,p in heaterList.items():
            turn_off(h)
        turn_on('edf')
    return value
processes['restore_utility'] = restore_utility

#######################################################################

def in_between(time_ranges):
    result = False
    for time_range in time_ranges.split('_'):
        if   time_range == "morning": result = result or is_morning()
        elif time_range == "day":     result = result or is_day()
        elif time_range == "evening": result = result or is_evening()
        elif time_range == "night":   result = result or is_night()
        elif time_range == "always":  result = True
        elif time_range == "never":   result = False
        else:                         result = result or _in_between(time_range)
    return result

# from https://stackoverflow.com/questions/28526012/python-time-range-validator/28553237#28553237
def _in_between(time_range):
    now = datetime.now().time()
    start, end = [datetime.strptime(s, "%H:%M").time()
                  for s in time_range.split("-")]
    if start < end: # e.g. "07:00-23:00"
        return start <= now < end
    elif end < start: # e.g. "23:00-07:00"
        return start <= now or now < end
    else: # start == end
        return True # consider it 24h interval

def is_morning(): # time is UTC
    timestamp = datetime.now().time() # UTC
    sunrise = get_value_from_redis("meteo/sunrise") # TZ
    sunrise = float(sunrise) - 3600.0 # convert to UTC in winter
    start   = sunrise - 7200.0 # 2h before sunrise
    start   = datetime.fromtimestamp(start).time()
    end     = sunrise + 9600.0 # 3h after sunrise
    end     = datetime.fromtimestamp(end).time()
    #syslog.syslog(DEBUG, 'morning? {} <= {} < {} ?'.format(start, timestamp, end))
    return start <= timestamp < end

def is_evening(): # time is UTC
    timestamp = datetime.now().time()
    sunset    = get_value_from_redis("meteo/sunset")
    sunset    = float(sunset) - 3600.0 # convert to UTC in winter
    start     = sunset 
    start     = datetime.fromtimestamp(start).time()
    end       = sunset + 14400.0 # 4h after sunset
    end       = datetime.fromtimestamp(end).time()
    #syslog.syslog(DEBUG, 'evening? {} <= {} < {} ?'.format(start, timestamp, end))
    return start <= timestamp < end

def is_day(): # time is UTC
    timestamp = datetime.now().time() # UTC
    sunrise   = get_value_from_redis("meteo/sunrise") # TZ
    sunrise   = float(sunrise) - 3600.0 # convert to UTC in winter
    start     = sunrise + 9600.0 # 3h after sunrise
    start     = datetime.fromtimestamp(start).time()
    sunset    = get_value_from_redis("meteo/sunset") # TZ
    sunset    = float(sunset) - 3600.0 # convert to UTC in winter
    end       = sunset 
    end       = datetime.fromtimestamp(end).time()
    #syslog.syslog(DEBUG, 'day? {} <= {} < {} ?'.format(start, timestamp, end))
    return start <= timestamp < end

def is_night(): # time is UTC
    return not ( is_morning() or is_day() or is_evening() )

def set_color(color, device):
    payload = '{"color":{"x":0.3497,"y":0.3533}}' # color = 'white'
    if color == 'indigo': payload = '{"color":{"x":0.4066,"y":0.1643}}'
    if color == 'blue':   payload = '{"color":{"x":0.1355,"y":0.0399}}'
    if color == 'green':  payload = '{"color":{"x":0.1704,"y":0.7090}}'
    if color == 'yellow': payload = '{"color":{"x":0.4339,"y":0.5008}}'
    if color == 'orange': payload = '{"color":{"x":0.6211,"y":0.3667}}'
    if color == 'red':    payload = '{"color":{"x":0.6942,"y":0.2963}}'
    try: ccolor = str(get_value_from_redis("bulb/{}".format(device)))
    except: ccolor = ""
    if ccolor != payload:
        da = {}
        da['topic'] = "bulb/{}".format(device)
        publish_to_cache(1, payload, da)
        publish_to_zigbee(payload, device)
        syslog.syslog(NOTICE, "Set color {} for {}".format(color, device))

def turn_on(device):
    try: 
        state = str(get_value_from_redis("{}/state".format(device)))
    except:
        state = "OFF"
    if state == 'OFF':
        payload = '{"state":"ON"}'
        publish_to_zigbee(payload, device)
        syslog.syslog(NOTICE, "Set ON for {}".format(device))
        return True
    else: 
        #syslog.syslog(DEBUG, 'NOOP (ON) for {}'.format(device))
        return False

def turn_off(device):
    try: 
        state = str(get_value_from_redis("{}/state".format(device)))
    except:
        state = "ON"
    if state == 'ON':
        payload = '{"state":"OFF"}'
        publish_to_zigbee(payload, device)
        syslog.syslog(NOTICE, "Set OFF for {}".format(device))
        return True
    else: 
        #syslog.syslog(DEBUG, 'NOOP (OFF) for {}'.format(device))
        return False

def is_on(device):
    try: 
        state = str(get_value_from_redis("{}/state".format(device)))
    except:
        state = "ON"
    if state == 'ON': return True
    else: return False

def is_off(device):
    try: 
        state = str(get_value_from_redis("{}/state".format(device)))
    except:
        state = "OFF"
    if state == 'OFF': return True
    else: return False

def blink(device):
    payload = '{"effect":"blink"}'
    publish_to_zigbee(payload, device)
    syslog.syslog(NOTICE, "Set blink for {}".format(device))
    return True

def available_heating_power():
    # some data used to make the decision
    soc       = float(get_value_from_redis("battery/state_of_charge"))
    battery   = float(get_value_from_redis("battery/power"))
    inverter  = float(get_value_from_redis("utility/voltage"))
    utility   = float(get_value_from_redis("utility/power"))
    vaisselle = float(get_value_from_redis("lave-vaisselle/power"))
    linge     = float(get_value_from_redis("lave-linge/power"))
    current   = float(get_value_from_redis("edf/current"))
    home      = float(get_value_from_redis("load/active_power"))
    power     = float(get_value_from_redis("solar/power")) 
    # let's adjust available power depending on the context
    # Inverter is currently running in SUB mode
    if inverter > 100.0 and utility > 40.0: # Utility is connected and current is pumped from it
        # we want to (soft) limit utility current to 16A (3300W)
        if battery < 0:
            power = 15.0 * 230.0 - utility + battery
        else:
            power = 15.0 * 230.0 - utility
        if utility > 3300.0: # we want to (hard) limit utility current to 16A
            power = 0.0
            blink('lampe-temoin')
            syslog.syslog(WARNING, 'Too much current currently pumped ({} W)'.format(utility))
    elif inverter > 100.0: # utility is present but not used (SBU mode)
        # limit to two heaters
        power = 1750.0 - used_heating_power()
        # do not draw too much power
        if home > 2000.0: 
            power = 0.0
            blink('lampe-temoin')
            syslog.syslog(WARNING, 'Enough load already ({}W)'.format(home))
        # Do not heat at all if battery low!
        if soc < 50.0: 
            power = 0.0
            blink('lampe-temoin')
            syslog.syslog(WARNING, 'Battery level too low ({}%)'.format(soc))
        syslog.syslog(DEBUG, 'EDF present but not used. Available heating power is {} Watt from battery ({}%)'.format(power, soc))
    else: # we run solely on battery
        # we allow 10W for each % of state_of_charge
        power += float(10.0 * soc) - used_heating_power()
        # Do not heat at all if battery low!
        if soc < 50.0: 
            power = 0.0
            blink('lampe-temoin')
            syslog.syslog(WARNING, 'Battery level too low ({}%)'.format(soc))
        syslog.syslog(DEBUG, 'No EDF used. Available heating power is {} Watt from battery ({}%)'.format(power, soc))
        # in case it went off by accident...
        #turn_on('edf')
    # we share power with other machines...
    if vaisselle > 0: 
        power -= 1500.0
        syslog.syslog(INFO, 'Lave-vaisselle is in use, reducing available power fo heaters...')
    if linge > 0: 
        power -= 2400
        syslog.syslog(INFO, 'Lave-linge is in use, reducing available power for heaters...')
    #syslog.syslog(DEBUG, 'Available heating power is {} Watt'.format(power))
    return power

def used_heating_power():
    heating = float(get_value_from_redis("chevet/power"))
    for heater, ir_power in heaterList.items():
        try: 
            if str(get_value_from_redis("{}/state".format(heater))) == "ON":
                power = float(get_value_from_redis('{}/power'.format(heater)))
                if power == 0:
                    power = ir_power
            heating += power
        except: 
            pass
    syslog.syslog(DEBUG, 'Used heating power is {} Watt'.format(heating))
    return heating

def find_heaters():
    list = {}
    for k, v in taskList.items():
        for task in v:
            if task['name'] == 'thermostat':
                thermo = k.split('/')[0].split('-')[0]
                device = task['params']['topic']
                ir_power = task['params']['ir_power']
                syslog.syslog(DEBUG, 'found heater {} ({}W) for {}'.format(device, ir_power, k))
                list[device] = ir_power
    syslog.syslog(NOTICE, 'Heaters found: {}'.format(list))
    return list

#######################################################################

def publish_to_sensors(timestamp, value, dict_args):
    topic = 'sensors/{}'.format(dict_args['topic'])
    publish_to_mqtt(timestamp, value, {'topic': topic})
    return value
processes['publish_to_sensors'] = publish_to_sensors

def publish_to_timeserie(timestamp, value, dict_args):
    otopic = dict_args['topic']
    topic = 'timeserie/{}'.format(dict_args['topic'])
    publish_to_mqtt(timestamp, value, {'topic': topic})
    #publish_to_cache(timestamp, value, {'topic': otopic})
    return value
processes['publish_to_timeserie'] = publish_to_timeserie

def publish_to_mqtt(timestamp, value, dict_args):
    topic = dict_args['topic']
    payload = '{};{}'.format(timestamp, value)
    msg = {'topic': topic, 'payload': payload}
    publish.multiple([msg])
    return value
#processes['publish_to_mqtt'] = publish_to_mqtt

def publish_to_zigbee(payload, device):
    topic   = 'zigbee2mqtt/{}/set_payload'.format(device)
    msg = {'topic': topic, 'payload': payload}
    #syslog.syslog(DEBUG, "Publish to zigbee: '{}' ; '{}'".format(topic, payload))
    publish.multiple([msg])

def publish_to_cache(timestamp, value, dict_args):
    topic = dict_args['topic']
    payload = '{};{}'.format(timestamp, value)
    previous = redis_client.get(topic)
    if previous == None: previous = payload
    redis_client.set('{}/previous'.format(topic), previous)
    redis_client.set(topic, payload)
    return value
processes['publish_to_cache'] = publish_to_cache

#######################################################################

def get_from_redis(topic):
    # fetch from redis
    try: payload = redis_client.get(topic)
    except: syslog.syslog(CRITICAL, 'fetching {} from Redis'.format(topic))
    # next line will raise an exception if redis failed
    timestamp = payload.split(';')[0]
    value = payload.split(';')[1]
    return timestamp, value

def get_value_from_redis(topic):
    timestamp, value = get_from_redis(topic)
    return value

def get_previous_from_redis(topic):
    # fetch from redis
    try: payload = redis_client.get('{}/previous'.format(topic))
    except: syslog.syslog(CRITICAL, 'fetching {}/previous from Redis'.format(topic))
    # next line will raise an exception if redis failed
    timestamp = payload.split(';')[0]
    value = payload.split(';')[1]
    return timestamp, value

def get_previous_value_from_redis(topic):
    timestamp, value = get_previous_from_redis(topic)
    return value

#######################################################################

def register(topic, taskname, params):
    if taskname not in processes.keys(): 
        syslog.syslog(WARNING, '{} is not a valid TASKNAME. forcing to be "noop"'.format(taskname))
        taskname = 'noop'
    if not topic in taskList: 
        syslog.syslog(INFO, 'Never saw this TOPIC before ({}). Adding to the list...'.format(topic))
        taskList[topic] = []
        taskList[topic].append({'name': 'publish_to_cache', 'function': publish_to_cache, 'params': {'topic': topic}})
    taskList[topic].append({'name': taskname, 'function': processes[taskname], 'params': params})
    if not taskname == 'noop':
        syslog.syslog(INFO, 'TASK {} registered FOR TOPIC {}'.format(taskname, topic))

#######################################################################

def apply_filter(topic, payload):
    try:
        timestamp = int(payload.split(';')[0])
        value = payload.split(';')[1]
    except: # seems no timestamp was provided
        timestamp = int(datetime.now().timestamp())
        value = payload
        #syslog.syslog(DEBUG, 'CORRECTION FOR {}: {};{}'.format(topic, timestamp, value))
    # ajust timestamp to the minute
    #timestamp = datetime.fromtimestamp(timestamp)
    #timestamp = datetime(year=timestamp.year,month=timestamp.month,day=timestamp.day,hour=timestamp.hour,minute=timestamp.minute)
    #timestamp = int(timestamp.timestamp())
    # We store received value to be able to restore it later in the process loop
    publish_to_cache(timestamp, value, {'topic': '{}/original'.format(topic)})
    if not topic in taskList:
        #syslog.syslog(DEBUG, 'no task defined yet FOR {}'.format(topic))
        register(topic, 'noop', None)
    for task in taskList[topic]:
        try:
            #if task['name'] != 'noop' and task['name'] != 'publish_to_cache': 
            #    syslog.syslog (DEBUG, 'Running TASK {} FOR {}...'.format(task,topic))
            #print(topic,'before: ',value)
            value = task['function'](timestamp, value, task['params'])
            #print('after',task['name'],':',value)
        except:
            syslog.syslog(CRITICAL, 'ERROR in TASK {} with value {} and params {}'.format(task['name'], value, task['params']))
            break
    # clean-up temporary storage
    redis_client.delete('{}/original'.format(topic))
    redis_client.delete('{}/original/previous'.format(topic))
    return value

#######################################################################

syslog.syslog(NOTICE, 'Available process blocks:')
syslog.syslog(NOTICE, '{}'.format(processes.keys()))

#######################################################################

def on_mqtt_connect(client, userdata, flags, rc):
    if rc == 0:
        syslog.syslog(NOTICE, "Connected to MQTT Broker!")
    else:
        syslog.syslog(EMERGENCY, "Failed to connect to MQTT broker; return code %d. Aborting!", rc)
        exit

def on_mqtt_message(client, userdata, msg):
    t_prefix = str(msg.topic).split('/')[0]
    t_device = str(msg.topic).split('/')[1]
    t_type   = str(msg.topic).split('/')[2]
    # remove the prefix
    topic    = '{}/{}'.format(t_device, t_type)
    # msg.payload is a b_str
    payload  = msg.payload.decode('ASCII') 
    apply_filter(topic, payload)

#######################################################################

def read_config(config_file):
    # must become resilient...
    with open(config_file, newline='') as csvfile:
        fieldnames = ['topic', 'taskname', 'params']
        confreader = csv.DictReader(csvfile, fieldnames=fieldnames)
        for raw in confreader:
            topic=raw['topic']
            if topic[0] == '#': continue
            taskname=raw['taskname']
            params={}
            for arg in str(raw['params']).split(';'):
                duo = arg.split('=')
                key=duo[0]
                value=duo[1]
                params[key]=value
            register(topic, taskname, params)
    syslog.syslog(NOTICE, 'Configuration loaded!')
    #print(taskList)

#######################################################################

try: 
    config_file = '/usr/local/etc/hems.processes.csv'
    read_config(config_file)
    heaterList = find_heaters()
except: 
    syslog.syslog(EMERGENCY, 'failed to read config file {}. Aborting!'.format(config_file))
    exit
mqtt_client = mqtt.Client()
mqtt_client.username_pw_set('emonpi', 'emonpimqtt2016')
mqtt_client.on_connect = on_mqtt_connect
mqtt_client.on_message = on_mqtt_message
try: 
    mqtt_client.connect(mqtt_broker, mqtt_port)
except: 
    exit
mqtt_client.subscribe(mqtt_prefix)

try: 
    redis_client = redis.Redis(host=redis_host, port=redis_port, decode_responses=True)
    syslog.syslog(NOTICE, 'Connected to Redis cache!')
    #for key in redis_client.scan_iter():
    #    redis_client.delete(key)
    #    print(key, 'deleted')
except: 
    syslog.syslog(EMERGENCY, 'Failed to connect to Redis cache. Aborting!')
    exit

syslog.syslog(NOTICE, 'Looping, waiting for MQTT messages...')
mqtt_client.loop_forever()
