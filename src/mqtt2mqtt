#!/usr/bin/env python3

import paho.mqtt.publish as publish
import paho.mqtt.client as mqtt
mqtt_broker = 'localhost'
mqtt_port   = 1883
mqtt_auth   = { 'username': 'emonpi', 'password':'emonpimqtt2016' }
mqtt_prefix = "sensors/#"

import redis
redis_host = 'localhost'
redis_port = 6379

import csv
def merge(*dict_args):
    result = {}
    for dictionary in dict_args:
        result.update(dictionary)
    return result

from datetime import date
from datetime import timedelta
from datetime import datetime

import syslog

processes = {}
taskList = {}
#task = {'function':<function_name>, 'params': <dict_args>}
heaterList = []

#######################################################################

def noop(timestamp, value, dict_args):
    return value
processes['noop'] = noop

def debug(timestamp, value, dict_args):
    print('ARGS:',dict_args)
    print('VALUE:',value)
    return value
processes['debug'] = debug

def scale(timestamp, value, dict_args):
    if value is None: return value
    factor = float(dict_args['param'])
    return float(value) * factor
processes['scale'] = scale

def divide(timestamp, value, dict_args):
    if value is None: return value
    value = float(value)
    factor = float(dict_args['param'])
    if factor == 0: return None
    return float(value / factor)
processes['divide'] = divide

def offset(timestamp, value, dict_args):
    if value is None: return value
    value = float(value)
    term = float(dict_args['param'])
    return value + term
processes['offset'] = offset

def allowpositive(timestamp, value, dict_args):
    if float(value) < 0: value = 0.0
    return value
processes['allowpositive'] = allowpositive

def allownegative(timestamp, value, dict_args):
    if float(value) > 0: value = 0.0
    return value
processes['allownegative'] = allownegative

def max_value_allowed(timestamp, value, dict_args):
    factor = float(dict_args['param'])
    if float(value) > factor: value = factor
    return value
processes['max_value_allowed'] = max_value_allowed

def min_value_allowed(timestamp, value, dict_args):
    factor = float(dict_args['param'])
    if float(value) < factor: value = factor
    return value
processes['min_value_allowed'] = min_value_allowed

def reset2zero(timestamp, value, dict_args):
    value = 0
    return value
processes['reset2zero'] = reset2zero

def reduce2bootstrap(timestamp, value, dict_args):
    try: 
        bootstrap_value = get_value_from_redis('{}/bootsrap'.format(dict_args['topic']))
    except:
        bootstrap_value = value
        publish_to_cache(timestamp, value, {'topic': '{}/bootsrap'.format(dict_args['topic'])})
    return float(value) - float(bootstrap_value)
processes['reduce2bootstrap'] = reduce2bootstrap

def reset2original(timestamp, value, dict_args):
    value = get_value_from_redis('{}/original'.format(dict_args['topic']))
    return value
processes['reset2original'] = reset2original

def reset2null(timestamp, value, dict_args):
    return None
processes['reset2null'] = reset2null

def signed2unsigned(timestamp, value, dict_args):
    if int(value) < 0: value = int(value) + 65536
    return value
processes['signed2unsigned'] = signed2unsigned

def abs_value(timestamp, value, dict_args):
    return abs(float(value))
processes['abs_value'] = abs_value

def times_sensor(timestamp, value, dict_args):
    sensor_id = dict_args['param']
    try: sensor = get_value_from_redis(sensor_id)
    except: 
        syslog.syslog ('Unable to fetch {} value from Redis! Aborting!'.format(sensor_id))
        return value
    return float(value) * float(sensor)
processes['times_sensor'] = times_sensor

def divide_sensor(timestamp, value, dict_args):
    sensor_id = dict_args['param']
    try: sensor = get_value_from_redis(sensor_id)
    except: 
        syslog.syslog ('Unable to fetch {} value from Redis! Aborting!'.format(sensor_id))
        return value
    if float(sensor) == 0: return None
    return float(value) / float(sensor)
processes['divide_sensor'] = divide_sensor

def add_sensor(timestamp, value, dict_args):
    sensor_id = dict_args['param']
    try: sensor = get_value_from_redis(sensor_id)
    except: 
        syslog.syslog ('Unable to fetch {} value from Redis! Aborting!'.format(sensor_id))
        return value
    return float(value) + float(sensor)
processes['add_sensor'] = add_sensor

def substract_sensor(timestamp, value, dict_args):
    sensor_id = dict_args['param']
    try: sensor = get_value_from_redis(sensor_id)
    except: 
        syslog.syslog ('Unable to fetch {} value from Redis! Aborting!'.format(sensor_id))
        raise
    response = float(value) - float(sensor)
    return response
processes['substract_sensor'] = substract_sensor

def max_sensor(timestamp, value, dict_args):
    sensor_id = dict_args['param']
    try: sensor = get_value_from_redis(sensor_id)
    except: 
        syslog.syslog ('Unable to fetch {} value from Redis! Aborting!'.format(sensor_id))
        return value
    if float(value) < float(sensor): return value
    else: return sensor
processes['max_sensor'] = max_sensor

def min_sensor(timestamp, value, dict_args):
    sensor_id = dict_args['param']
    try: sensor = get_value_from_redis(sensor_id)
    except: 
        syslog.syslog ('Unable to fetch {} value from Redis! Aborting!'.format(sensor_id))
        return value
    if float(value) > float(sensor): return value
    else: return sensor
processes['min_sensor'] = min_sensor

def report_power(timestamp, value, dict_args):
    try: topic = dict_args['topic']
    except: 
        syslog.syslog ('No power channel provided. Aborting!')
    return value

def power_to_energy(timestamp, value, dict_args):
    try: topic = dict_args['topic']
    except: 
        syslog.syslog ('No power channel provided. Aborting!')
        return value
    try: energy_name = dict_args['energy_name']
    except: 
        syslog.syslog ('No energy channel provided. Aborting!')
        return value
    try: previous_timestamp, previous_value = get_previous_from_redis(topic)
    except: 
        syslog.syslog ('No previous power value found for {}'.format(topic))
        previous_timestamp = timestamp
        previous_value = 0.0
    try: previous_t_energy, previous_v_energy = get_from_redis(energy_name)
    except: 
        syslog.syslog ('No previous energy value found for {}'.format(energy_name))
        previous_v_energy = 0.0
        previous_t_energy = timestamp
    # a bit of computation
    # beware about the data types
    timestamp    = int(timestamp)
    previous_timestamp = int(previous_timestamp)
    delta_time   = float(int(timestamp) - int(previous_timestamp))
    delta_value  = float(value) - float(previous_value)
    delta_energy = delta_time * float(previous_value) + ( delta_value * delta_time * 0.5 )
    # power is in Watt, and time in second. We want kWh for energy.
    delta_energy = delta_energy / 3600 / 1000
    energy       = float(previous_v_energy) + delta_energy
    return energy
processes['power_to_energy'] = power_to_energy

def energy_to_energy_monthly(timestamp, value, dict_args):
    try: energy_name = dict_args['energy_name']
    except: 
        syslog.syslog ('No energy channel provided. Aborting!')
        return value
    abs_energy_name_daily   = 'abs_{}_daily'.format(energy_name)
    energy_name_daily       = '{}_daily'.format(energy_name)
    abs_energy_name_weekly  = 'abs_{}_weekly'.format(energy_name)
    energy_name_weekly      = '{}_weekly'.format(energy_name)
    abs_energy_name_monthly = 'abs_{}_monthly'.format(energy_name)
    energy_name_monthly     = '{}_monthly'.format(energy_name)
    today                   = date.today()
    yesterday               = today - timedelta(days = 1)
    previous_timestamp, previous_value = get_previous_from_redis(energy_name)
    previous_date           = date.fromtimestamp(int(previous_timestamp))
    if previous_date == yesterday:
        try: t_daily, v_daily = get_from_redis(abs_energy_name_daily)
        except:
            t_daily = previous_timestamp
            v_daily = 0.0
        publish_to_cache(previous_timestamp, previous_value, {'topic': abs_energy_name_daily})
        # we just computed yesterday's value! let's adapt the publish date accordingly...
        #publish_date = yesterday - timedelta(days = 1)
        #publish_timestamp = int(datetime(year=publish_date.year,month=publish_date.month,day=publish_date.day,).timestamp())
        #publish_to_timeserie(publish_timestamp, float(previous_value) - float(v_daily), {'topic': energy_name_daily})
        publish_to_timeserie(previous_timestamp, float(previous_value) - float(v_daily), {'topic': energy_name_daily})
    if previous_date == yesterday and today.isoweekday() == 1:
        try: t_weekly, v_weekly = get_from_redis(abs_energy_name_weekly)
        except:
            t_weekly = previous_timestamp
            v_weekly = 0.0
        publish_to_cache(previous_timestamp, previous_value, {'topic': abs_energy_name_weekly})
        publish_to_timeserie(previous_timestamp, float(previous_value) - float(v_weekly), {'topic': energy_name_weekly})
    if previous_date == yesterday and today.day == 1:
        try: t_monthly, v_monthly = get_from_redis(abs_energy_name_monthly)
        except:
            t_monthly = previous_timestamp
            v_monthly = 0.0
        publish_to_cache(previous_timestamp, previous_value, {'topic': abs_energy_name_monthly})
        publish_to_timeserie(previous_timestamp, float(previous_value) - float(v_monthly), {'topic': energy_name_monthly})
    return value
processes['energy_to_energy_monthly'] = energy_to_energy_monthly

def energy_to_energy_today(timestamp, value, dict_args):
    try: energy_name = dict_args['energy_name']
    except: 
        syslog.syslog ('No energy channel provided. Aborting!')
        return value
    today        = date.today()
    yesterday    = today - timedelta(days = 1)
    energy_name_today_initial = '{}_today_initial'.format(energy_name)
    try: initial_timestamp, initial_energy = get_from_redis(energy_name_today_initial)
    except: 
        initial_energy = 0.0
        initial_timestamp = timestamp
        publish_to_cache(timestamp, initial_energy, {'topic': energy_name_today_initial})
    initial_date = date.fromtimestamp(int(initial_timestamp))
    if initial_date == yesterday:
        initial_energy = value
        publish_to_cache(timestamp, initial_energy, {'topic': energy_name_today_initial})
    daily_energy = float(value) - float(initial_energy)
    return daily_energy
processes['energy_to_energy_today'] = energy_to_energy_today

def accumulator(timestamp, value, dict_args):
    return value
#processes['accumulator'] = accumulator

def pulse_diff(timestamp, value, dict_args):
    return value
#processes['pulse_diff'] = pulse_diff

def energy_to_power(timestamp, value, dict_args):
    return value
#processes['energy_to_power'] = energy_to_power

def allocate_extra_power(timestamp, value, dict_args):
    power = float(value)
    if power > 0: # battery is discharging
        # no extra power to allocate. Do we need to stop some load?
        soc = int(get_value_from_redis('battery/state_of_charge'))
        if soc < 50:
            # stop free load(s)
            None
        else:
            None
    return value
#processes['allocate_extra_power'] = allocate_extra_power

def display_soc(timestamp, value, dict_args):
    soc = float(value)
    device = dict_args['topic']
    color = 'red'
    if soc > 50.0: 
        color = 'orange'
    if soc > 60.0: 
        color = 'yellow'
    if soc > 70.0: 
        color = 'green'
    if soc > 80.0: 
        color = 'blue'
    if soc > 90.0: 
        color = 'indigo'
    set_color(color, device)
    return value
processes['display_soc'] = display_soc

def need_utility(timestamp, value, dict_args):
    soc = float(value)
    utility = dict_args['topic']
    if soc < 50.0: 
        turn_on(utility)
        blink('lampe-temoin')
    #if soc > 98.0: 
    #    turn_off(utility)
    #    blink('lampe-temoin')
    return value
processes['need_utility'] = need_utility

def thermostat(timestamp, value, dict_args):
    heater          = dict_args['topic']
    temperature     = float(value)
    comfort         = float(dict_args['comfort'])
    try:     forced = in_between(dict_args['forced'])
    except:  forced = False
    if forced: 
        syslog.syslog('No comfort reduction for {} because {}'.format(heater,dict_args['forced']))
    else: 
        comfort = 17.0
        syslog.syslog('Reducing comfort to {} for {}'.format(comfort, heater))
    # do we need to heat the room?
    if temperature > comfort:
        syslog.syslog('{} is warm enough'.format(heater))
        turn_off(heater)
        return value
    # what about available power?
    ir_power        = float(dict_args['ir_power'])
    available_power = available_heating_power() # - used_heating_power()
    # do not count heater twice
    try: available_power += float(get_value_from_redis("{}/power".format(heater)))
    except: 
        syslog.syslog('I guess {} has no associated heater!?'.format(heater))
        return value
    syslog.syslog('Heating ({}): available: {}W; needed:{}W; T: {}°C; consigne: {}°C'.format(heater, available_power, ir_power, temperature, comfort))
    # do we have enough power to turn on this heater?
    if ir_power < available_power: 
        turn_on(heater)
    else: 
        turn_off(heater)
    return value
processes['thermostat'] = thermostat

def click(timestamp, value, dict_args):
    # value may be either "single" or "double"
    syslog.syslog('Button: {}'.format(value))
    return value
processes['click'] = click

def click_thermostat(timestamp, value, dict_args):
    topic = '{}-thermo/temperature'.format(dict_args['topic'])
    single = float(dict_args['single'])
    double = float(dict_args['double'])
    if value == 'single': 
        comfort = single
    if value == 'double': 
        comfort = double
    for task in taskList[topic]:
        if task['name'] != 'thermostat': 
            continue 
        params = task['params']
        params['comfort'] = comfort
        syslog.syslog('Set comfort to {}°C for {}'.format(comfort, dict_args['topic']))
    return value
processes['click_thermostat'] = click_thermostat

#######################################################################

# from https://stackoverflow.com/questions/28526012/python-time-range-validator/28553237#28553237
def in_between(time_range):
    now = datetime.now().time()
    start, end = [datetime.strptime(s, "%H:%M").time()
                  for s in time_range.split("-")]
    if start < end: # e.g. "07:00-23:00"
        return start <= now < end
    elif end < start: # e.g. "23:00-07:00"
        return start <= now or now < end
    else: # start == end
        return True # consider it 24h interval

def is_morning(): # time is UTC
    return in_between("04:00-09:00")

def is_evening(): # time is UTC
    return in_between("15:30-21:00")

def is_night(): # time is UTC
    return in_between("21:00-04:00")

def is_day(): # time is UTC
    return in_between("09:00-15:30")

def set_color(color, device):
    payload = '{"color":{"x":0.3497,"y":0.3533}}' # color = 'white'
    if color == 'indigo': payload = '{"color":{"x":0.4066,"y":0.1643}}'
    if color == 'blue':   payload = '{"color":{"x":0.1355,"y":0.0399}}'
    if color == 'green':  payload = '{"color":{"x":0.1704,"y":0.7090}}'
    if color == 'yellow': payload = '{"color":{"x":0.4339,"y":0.5008}}'
    if color == 'orange': payload = '{"color":{"x":0.6211,"y":0.3667}}'
    if color == 'red':    payload = '{"color":{"x":0.6942,"y":0.2963}}'
    publish_to_zigbee(payload, device)
    syslog.syslog("Set color {} for {}".format(color, device))

def turn_on(device):
    payload = '{"state":"ON"}'
    publish_to_zigbee(payload, device)
    syslog.syslog("Set ON for {}".format(device))

def turn_off(device):
    payload = '{"state":"OFF"}'
    publish_to_zigbee(payload, device)
    syslog.syslog("Set OFF for {}".format(device))

def blink(device):
    payload = '{"effect":"blink"}'
    publish_to_zigbee(payload, device)
    syslog.syslog("Set blink for {}".format(device))

def available_heating_power():
    # some data used to make the decision
    soc       = float(get_value_from_redis("battery/state_of_charge"))
    inverter  = float(get_value_from_redis("utility/voltage"))
    utility   = float(get_value_from_redis("edf/voltage"))
    vaisselle = float(get_value_from_redis("lave-vaisselle/power"))
    linge     = float(get_value_from_redis("lave-linge/power"))
    current   = float(get_value_from_redis("edf/current"))
    home      = float(get_value_from_redis("load/active_power"))
    # let's adjust available power depending on the context
    power     = float(get_value_from_redis("solar/power"))
    if current > 1.0: # utility is connected to inverter
        # we want to (soft) limit utility current to 10A
        power = float((10.0 - current) * utility)
        if current > 10.2: # we want to (hard) limit utility current to 10A
            power = 0.0
            blink('lampe-temoin')
            syslog.syslog('Too much current currently pumped ({}A)'.format(current))
    elif utility > 1.0: # utility is present but not used
        # limit to two heaters
        power = 1750.0 - used_heating_power()
        # do not draw too much power
        if home > 2000.0: 
            power = 0.0
            blink('lampe-temoin')
            syslog.syslog('Enough load already ({}W)'.format(home))
        # Do not heat at all if battery low!
        if soc < 50.0: 
            power = 0.0
            blink('lampe-temoin')
            syslog.syslog('Battery level too low ({}%)'.format(soc))
    else: # we run solely on battery
        # we allow 10W for each % of state_of_charge
        power += float(10.0 * soc)
        # Do not heat at all if battery low!
        if soc < 50.0: 
            power = 0.0
            blink('lampe-temoin')
            syslog.syslog('Battery level too low ({}%)'.format(soc))
    # we share power with other machines...
    power -= vaisselle
    power -= linge
    #syslog.syslog('Available heating power is {} Watt'.format(power))
    return power

def used_heating_power():
    heating = float(get_value_from_redis("chevet/power"))
    for heater in heaterList:
        try: heating += float(get_value_from_redis("{}/power".format(heater)))
        except: pass
    syslog.syslog('Used heating power is {} Watt'.format(heating))
    return heating

def find_heaters():
    list = []
    for k, v in taskList.items():
        for task in v:
            if task['name'] == 'thermostat':
                thermo = k.split('/')[0].split('-')[0]
                device = task['params']['topic']
                syslog.syslog('found heater {} from thermo {}'.format(device, thermo))
                list.append(device)
    return list

#######################################################################

def publish_to_sensors(timestamp, value, dict_args):
    topic = 'sensors/{}'.format(dict_args['topic'])
    publish_to_mqtt(timestamp, value, {'topic': topic})
    return value
processes['publish_to_sensors'] = publish_to_sensors

def publish_to_timeserie(timestamp, value, dict_args):
    otopic = dict_args['topic']
    topic = 'timeserie/{}'.format(dict_args['topic'])
    publish_to_mqtt(timestamp, value, {'topic': topic})
    publish_to_cache(timestamp, value, {'topic': otopic})
    return value
processes['publish_to_timeserie'] = publish_to_timeserie

def publish_to_mqtt(timestamp, value, dict_args):
    topic = dict_args['topic']
    payload = '{};{}'.format(timestamp, value)
    msg = {'topic': topic, 'payload': payload}
    publish.multiple([msg])
    return value
#processes['publish_to_mqtt'] = publish_to_mqtt

def publish_to_zigbee(payload, device):
    topic   = 'zigbee2mqtt/{}/set_payload'.format(device)
    msg = {'topic': topic, 'payload': payload}
    #syslog.syslog("Publish to zigbee: '{}' ; '{}'".format(topic, payload))
    publish.multiple([msg])

def publish_to_cache(timestamp, value, dict_args):
    topic = dict_args['topic']
    payload = '{};{}'.format(timestamp, value)
    previous = redis_client.get(topic)
    if previous == None: previous = payload
    redis_client.set('{}/previous'.format(topic), previous)
    redis_client.set(topic, payload)
    return value
processes['publish_to_cache'] = publish_to_cache

#######################################################################

def get_from_redis(topic):
    # fetch from redis
    payload = redis_client.get(topic)
    timestamp = payload.split(';')[0]
    value = payload.split(';')[1]
    return timestamp, value

def get_value_from_redis(topic):
    timestamp, value = get_from_redis(topic)
    return value

def get_previous_from_redis(topic):
    # fetch from redis
    payload = redis_client.get('{}/previous'.format(topic))
    timestamp = payload.split(';')[0]
    value = payload.split(';')[1]
    return timestamp, value

def get_previous_value_from_redis(topic):
    timestamp, value = get_previous_from_redis(topic)
    return value

#######################################################################

def register(topic, taskname, params):
    if taskname not in processes.keys(): 
        syslog.syslog('{} is not a valid TASKNAME. forcing to be "noop"'.format(taskname))
        taskname = 'noop'
    if not topic in taskList: 
        syslog.syslog('Never saw this TOPIC before ({}). Adding to the list...'.format(topic))
        taskList[topic] = []
        #taskList[topic].append({'name': 'publish_to_cache', 'function': publish_to_cache, 'params': {'topic': topic}})
    taskList[topic].append({'name': taskname, 'function': processes[taskname], 'params': params})
    if not taskname == 'noop':
        syslog.syslog('TASK {} registered FOR TOPIC {}'.format(taskname, topic))

#######################################################################

def apply_filter(topic, payload):
    try:
        timestamp = payload.split(';')[0]
        value = payload.split(';')[1]
    except: # seems no timestamp was provided
        timestamp = int(datetime.now().timestamp())
        value = payload
        #syslog.syslog('CORRECTION FOR {}: {};{}'.format(topic, timestamp, value))
    publish_to_cache(timestamp, value, {'topic': '{}/original'.format(topic)})
    if not topic in taskList: 
        #syslog.syslog('no task defined yet FOR {}'.format(topic))
        register(topic, 'noop', None)
    for task in taskList[topic]:
        try:
            #if task['name'] != 'noop' and task['name'] != 'publish_to_cache': 
            #    syslog.syslog ('Running TASK {} FOR {}...'.format(task,topic))
            #print(topic,'before: ',value)
            value = task['function'](timestamp, value, task['params'])
            #print('after',task['name'],':',value)
        except:
            syslog.syslog('ERROR in TASK {} with value {} and params {}'.format(task['name'], value, task['params']))
            break
    redis_client.delete('{}/original'.format(topic))
    redis_client.delete('{}/original/previous'.format(topic))
    return value

#######################################################################

syslog.syslog('Available process blocks:')
syslog.syslog('{}'.format(processes.keys()))

#######################################################################

def on_mqtt_connect(client, userdata, flags, rc):
    if rc == 0:
        syslog.syslog("Connected to MQTT Broker!")
    else:
        syslog.syslog("Failed to connect, return code %d. Aborting!", rc)
        exit

def on_mqtt_message(client, userdata, msg):
    t_prefix = str(msg.topic).split('/')[0]
    t_device = str(msg.topic).split('/')[1]
    t_type   = str(msg.topic).split('/')[2]
    # remove the prefix
    topic    = '{}/{}'.format(t_device, t_type)
    # msg.payload is a b_str
    payload  = msg.payload.decode('ASCII') 
    apply_filter(topic, payload)

#######################################################################

def read_config(config_file):
    # must become resilient...
    with open(config_file, newline='') as csvfile:
        fieldnames = ['topic', 'taskname', 'params']
        confreader = csv.DictReader(csvfile, fieldnames=fieldnames)
        for raw in confreader:
            topic=raw['topic']
            if topic[0] == '#': continue
            taskname=raw['taskname']
            params={}
            for arg in str(raw['params']).split(';'):
                duo = arg.split('=')
                key=duo[0]
                value=duo[1]
                params[key]=value
            register(topic, taskname, params)
    syslog.syslog('Configuration loaded!')
    #print(taskList)

#######################################################################

try: 
    config_file = '/usr/local/etc/hems.processes.csv'
    read_config(config_file)
    heaterList = find_heaters()
except: 
    syslog.syslog('failed to read config file {}. Aborting!'.format(config_file))
    exit
mqtt_client = mqtt.Client()
mqtt_client.username_pw_set('emonpi', 'emonpimqtt2016')
mqtt_client.on_connect = on_mqtt_connect
mqtt_client.on_message = on_mqtt_message
try: 
    mqtt_client.connect(mqtt_broker, mqtt_port)
except: 
    exit
mqtt_client.subscribe(mqtt_prefix)

try: 
    redis_client = redis.Redis(host=redis_host, port=redis_port, decode_responses=True)
    syslog.syslog('Connected to Redis cache!')
    #for key in redis_client.scan_iter():
    #    redis_client.delete(key)
    #    print(key, 'deleted')
except: 
    syslog.syslog('Failed to connect to Redis cache. Aborting!')
    exit

syslog.syslog('Looping, waiting for MQTT messages...')
mqtt_client.loop_forever()
